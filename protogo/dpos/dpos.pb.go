// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dpos/dpos.proto

package dpos

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CandidateInfo struct {
	PeerID string `protobuf:"bytes,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	Weight string `protobuf:"bytes,2,opt,name=Weight,proto3" json:"Weight,omitempty"`
}

func (m *CandidateInfo) Reset()         { *m = CandidateInfo{} }
func (m *CandidateInfo) String() string { return proto.CompactTextString(m) }
func (*CandidateInfo) ProtoMessage()    {}
func (*CandidateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fa2b9a4704091d, []int{0}
}
func (m *CandidateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CandidateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CandidateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CandidateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandidateInfo.Merge(m, src)
}
func (m *CandidateInfo) XXX_Size() int {
	return m.Size()
}
func (m *CandidateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CandidateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CandidateInfo proto.InternalMessageInfo

func (m *CandidateInfo) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *CandidateInfo) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func init() {
	proto.RegisterType((*CandidateInfo)(nil), "dpos.CandidateInfo")
}

func init() { proto.RegisterFile("dpos/dpos.proto", fileDescriptor_c9fa2b9a4704091d) }

var fileDescriptor_c9fa2b9a4704091d = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x29, 0xc8, 0x2f,
	0xd6, 0x07, 0x11, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x2c, 0x20, 0xb6, 0x92, 0x3d, 0x17,
	0xaf, 0x73, 0x62, 0x5e, 0x4a, 0x66, 0x4a, 0x62, 0x49, 0xaa, 0x67, 0x5e, 0x5a, 0xbe, 0x90, 0x18,
	0x17, 0x5b, 0x40, 0x6a, 0x6a, 0x91, 0xa7, 0x8b, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x94,
	0x07, 0x12, 0x0f, 0x4f, 0xcd, 0x4c, 0xcf, 0x28, 0x91, 0x60, 0x82, 0x88, 0x43, 0x78, 0x4e, 0x6e,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72,
	0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x93, 0x9c, 0x91, 0x98, 0x99,
	0x97, 0x9b, 0x98, 0x9d, 0x5a, 0xa4, 0x97, 0x5f, 0x94, 0xae, 0x8f, 0xe0, 0xea, 0xa6, 0xe7, 0xeb,
	0x17, 0x24, 0xe9, 0x83, 0xdd, 0x91, 0x9e, 0x0f, 0x76, 0x54, 0x12, 0x1b, 0x98, 0x67, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0xb4, 0xaa, 0x6d, 0x91, 0xa8, 0x00, 0x00, 0x00,
}

func (m *CandidateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CandidateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CandidateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weight) > 0 {
		i -= len(m.Weight)
		copy(dAtA[i:], m.Weight)
		i = encodeVarintDpos(dAtA, i, uint64(len(m.Weight)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintDpos(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDpos(dAtA []byte, offset int, v uint64) int {
	offset -= sovDpos(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CandidateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovDpos(uint64(l))
	}
	l = len(m.Weight)
	if l > 0 {
		n += 1 + l + sovDpos(uint64(l))
	}
	return n
}

func sovDpos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDpos(x uint64) (n int) {
	return sovDpos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CandidateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CandidateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CandidateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDpos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDpos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDpos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDpos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDpos
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDpos
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDpos
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDpos        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDpos          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDpos = fmt.Errorf("proto: unexpected end of group")
)
